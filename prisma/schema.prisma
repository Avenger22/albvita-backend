// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int         @id @default(autoincrement())
  userName             String      @unique
  fullName             String      @default("")
  email                String      @unique
  password             String
  boughtItems          Bought[]
  subscribedNewsletter Subscribe[]
  wishlistItems        Wishlist[]
  orders               Order[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String         @default("")
  price         String         @default("")
  image         String         @default("")
  stock         Int            @default(1)
  date          DateTime       @default(now())
  description   String         @default("")
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boughtItems   Bought[]
  wishlistItems Wishlist[]
  inOrders      ProductOrder[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @default("")
  products Product[]
}

model Subscribe {
  id     Int    @id @default(autoincrement())
  email  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Bought {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(0)
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductOrder {
  id Int @id @default(autoincrement())

  productId Int
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id              Int            @id @default(autoincrement())
  firstName       String         @default("firstname")
  lastName        String         @default("surname")
  city            String         @default("Tirana")
  address         String         @default("Rr.test")
  postCode        String         @default("0001")
  email           String         @default("test@email.com")
  phoneNumber     String         @default("067123456")
  recieveDiscount Boolean        @default(false)
  userId          Int
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hasProducts     ProductOrder[]
}
